/*!
 * Vueform Mask Plugin v1.0.4 (https://github.com/vueform/plugin-mask)
 * Copyright (c) 2024-present Adam Berecz <adam@vueform.com>
 * Licensed under the MIT License
 */

import{toRefs as e,ref as a,computed as l,onMounted as u,watch as t,nextTick as s}from"vue";var v=(v={},n=null)=>({apply:"TextElement",props:{mask:{required:!1,type:[String,Object,Array,Function]},unmask:{require:!1,type:Boolean,default:!1},allowIncomplete:{require:!1,type:Boolean,default:!1}},setup(o,r,i){const{mask:m,inputType:d,formatLoad:k,unmask:p,allowIncomplete:c}=e(o);if(!m.value)return i;const{nullValue:f,value:y,el$:h,path:b,form$:g,defaultValue:M,resetting:V,resetValidators:w,input:x}=i,A=a(null),E=a(y.value),I=a([]),O=a(!1),$=l((()=>"function"==typeof v?v(n):v)),j=l((()=>{let e="function"==typeof m.value?T(m.value):q(m.value);return $.value.definitions&&(e={...e,definitions:C({...$.value.definitions,...e.definitions})}),$.value.blocks&&(e={...e,blocks:C({...$.value.blocks,...e.blocks})}),e.definitions&&(e={...e,definitions:C(e.definitions)}),e.blocks&&(e={...e,blocks:C(e.blocks)}),e})),L=l({get:()=>E.value,set:e=>E.value=e}),S=l((()=>-1!==[void 0,null,""].indexOf(L.value))),q=e=>"string"==typeof e?{mask:B(e)}:e instanceof RegExp?{mask:e}:Array.isArray(e)?e.map(q):e&&"object"==typeof e?D(e):{mask:e},C=e=>Object.keys(e).reduce(((a,l)=>({...a,[l]:q(e[l])})),{}),D=e=>{let a={...e};return"number"===e.mask&&(a.mask=Number),"range"===e.mask&&(a.mask=n.MaskedRange),"enum"===e.mask&&(a.mask=n.MaskedEnum),"date"===e.mask&&(a.mask=Date),void 0!==e.placeholder&&(a.lazy=!a.placeholder),void 0===e.caseInsensitive||e.matchValue||(a.matchValue=F),e.dispatch&&(a.dispatch=(a,l)=>e.dispatch(a,l,h.value,g.value)),Array.isArray(e.mask)&&(a.mask=e.mask.map(q),a.dispatch||(e.mask.some((e=>e.startsWith))&&(a.dispatch=(e,a)=>{const l=(a.value+e).replace(/\D/g,"");return a.compiledMasks.find((e=>0===l.indexOf(e.startsWith)))}),e.element&&(a.dispatch=(a,l)=>{let u=g.value.el$(e.element)?.value;return l.compiledMasks.find((e=>e.when==u||!e.when))}))),e.blocks&&(a.blocks=Object.keys(e.blocks).reduce(((a,l)=>({...a,[l]:q(e.blocks[l])})),{})),a},T=e=>q(e(n)),B=e=>e.replace(/\\\\/g,"\\"),F=(e,a,l)=>n.MaskedEnum.DEFAULTS.matchValue(e.toLowerCase(),a.toLowerCase(),l),R=()=>"text"===d.value||(console.error(`Input mask only works with type="text" (found at: '${b.value}').`),!1),W=()=>{L.value=A.value.displayValue,c.value||A.value.masked.isComplete?y.value=p.value?A.value.masked.unmaskedValue:A.value.value:y.value=f.value},z=()=>{A.value&&A.value.destroy()},N=()=>{A.value&&z(),A.value=n(h.value.input,j.value),A.value.on("accept",(()=>{W()})),W(),I.value.map((e=>e())),j.value?.element&&I.value.push(t(l((()=>g.value.el$(j.value.element).value)),(()=>{O.value?O.value=!1:L.value=f.value,U()})))},U=()=>{s((()=>{N()}))};return u((()=>{R()&&N()})),t(d,(e=>{R()})),t(j,((e,a)=>{A.value&&N()}),{deep:!0}),{...i,Mask:A,destroyMask:z,initMask:N,syncMask:W,refreshMask:U,handleInput:()=>{},model:L,load:(e,a=!1)=>{O.value=!0,y.value=f.value;let l=a&&k.value?k.value(e,g.value):e;y.value=l,A.value&&(A.value[p.value?"unmaskedValue":"value"]="number"==typeof l?l.toString():l)},update:e=>{O.value=!0,y.value=f.value,y.value=e,A.value&&(A.value[p.value?"unmaskedValue":"value"]="number"==typeof e?e.toString():e)},clear:()=>{x.value.value="",L.value=f.value,y.value=f.value,N()},reset:()=>{V.value=!0,x.value.value=M.value,L.value=M.value,y.value=M.value,w(),N()},empty:S}}});export{v as default};
